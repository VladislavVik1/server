import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const CoordinatesSchema = new Schema(
  { lat: { type: Number, default: null }, lng: { type: Number, default: null } },
  { _id: false }
);

const LocationSchema = new Schema(
  {
    address: { type: String, default: '' },
    coordinates: { type: CoordinatesSchema, default: () => ({}) },
  },
  { _id: false }
);

const CrimeReportSchema = new Schema(
  {
    // –û—Å–Ω–æ–≤–Ω–æ–µ
    type: { type: String, required: true },
    description: { type: String, default: '' },
    comments: { type: String, default: '' }, // üëà –¥–æ–±–∞–≤–∏–ª–∏

    // –õ–æ–∫–∞—Ü–∏—è –∏ –¥–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    location: { type: LocationSchema, default: () => ({}) },
    date: { type: Date }, // –∫–æ–≥–¥–∞ —Å–ª—É—á–∏–ª–æ—Å—å

    // –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –æ—Ç—á—ë—Ç–∞ (–∏–∑ —Ñ–æ—Ä–º—ã)
    reportIssuedAt: { type: Date, default: null }, // üëà –¥–æ–±–∞–≤–∏–ª–∏

    // –ö–µ–º –ø–æ–¥–∞–Ω
    issuerFirst: { type: String, default: '' },   // üëà –¥–æ–±–∞–≤–∏–ª–∏
    issuerLast:  { type: String, default: '' },   // üëà –¥–æ–±–∞–≤–∏–ª–∏

    // –í–æ–ø—Ä–æ—Å—ã
    suspectAware:  { type: String, default: '' }, // üëà –¥–æ–±–∞–≤–∏–ª–∏
    arrestsSoFar:  { type: String, default: '' }, // üëà –¥–æ–±–∞–≤–∏–ª–∏

    // –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π
    suspectFirst: { type: String, default: '' },  // üëà –¥–æ–±–∞–≤–∏–ª–∏
    suspectLast:  { type: String, default: '' },  // üëà –¥–æ–±–∞–≤–∏–ª–∏

    // –ú–µ–¥–∏–∞
    imageUrl: { type: String, default: null },
    attachments: [{ type: String }],

    // –ê–≤—Ç–æ—Ä –æ—Ç—á—ë—Ç–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ref –ø–æ —Ä–æ–ª–∏)
    user: { type: Schema.Types.ObjectId, refPath: 'userModel' },
    userModel: {
      type: String,
      enum: ['People', 'Spec', 'AuthUser'],
      default: 'People',
    },

    // –°—Ç–∞—Ç—É—Å
    status: {
      type: String,
      enum: ['pending', 'approved', 'denied', 'rejected', 'closed'],
      default: 'pending',
    },
  },
  { timestamps: true }
);

export default mongoose.models.CrimeReport ||
  model('CrimeReport', CrimeReportSchema);

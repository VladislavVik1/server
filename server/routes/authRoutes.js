import dotenv from 'dotenv';
dotenv.config(); // –∑–∞–≥—Ä—É–∂–∞–µ–º .env —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º

import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';

import AuthUser from '../models/AuthUser.js'; // admin (pwd)
import People from '../models/People.js';     // public (peoples)
import Spec from '../models/Spec.js';         // responder (spec)

import { authenticate } from '../middleware/auth.js';

const router = express.Router();
const { JWT_SECRET = 'dev_secret', JWT_EXPIRATION = '1d' } = process.env;

// —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–µ–π—Å-–∏–Ω—Å–µ–Ω—Å–∏—Ç–∏–≤ –ø–æ–∏—Å–∫–∞ –ø–æ email
const escapeRegExp = (s='') => s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

/**
 * POST /api/auth/register
 * Body: { email, password, role: 'public'|'responder' }
 * ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –¢–û–ú —Ä–µ–≥–∏—Å—Ç—Ä–µ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å;
 * ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å email –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
 */
router.post('/register', async (req, res) => {
  try {
    const emailRaw = String(req.body.email || '').trim(); // üëà –ù–ï .toLowerCase()
    const password = String(req.body.password || '');
    const role = String(req.body.role || '').trim();

    if (!emailRaw || !password || !role) {
      return res.status(400).json({ message: 'email, password –∏ role –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    if (!['public', 'responder'].includes(role)) {
      return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å' });
    }

    const Model = role === 'public' ? People : Spec;

    // –∫–µ–π—Å-–∏–Ω—Å–µ–Ω—Å–∏—Ç–∏–≤ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    const emailRE = new RegExp(`^${escapeRegExp(emailRaw)}$`, 'i');
    const exists = await Model.findOne({ email: emailRE });
    if (exists) return res.status(400).json({ message: 'Email —É–∂–µ –∑–∞–Ω—è—Ç' });

    const hash = await bcrypt.hash(password, 10);
    const user = await Model.create({ email: emailRaw, password: hash, role });

    // —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω (—É–¥–æ–±–Ω–æ —Ñ—Ä–æ–Ω—Ç—É)
    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRATION }
    );

    return res.status(201).json({
      message: role === 'public' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' : '–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω',
      id: user._id,
      token,
      role: user.role,
    });
  } catch (err) {
    if (err?.code === 11000) {
      return res.status(400).json({ message: 'Email —É–∂–µ –∑–∞–Ω—è—Ç' });
    }
    if (err?.name === 'ValidationError') {
      return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: err.errors });
    }
    console.error('auth/register error:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error: err.message });
  }
});

/**
 * POST /api/auth/login
 * Body: { email, password [, role] }
 * ‚Äî –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞;
 * ‚Äî –≤ —Ç–æ–∫–µ–Ω –∫–ª–∞–¥—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å –∏ email –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–∑ –ë–î.
 */
router.post('/login', async (req, res) => {
  try {
    const emailRaw = String(req.body.email || '').trim(); // üëà –ù–ï .toLowerCase()
    const password = String(req.body.password || '');

    if (!emailRaw || !password) {
      return res.status(400).json({ message: 'email –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const emailRE = new RegExp(`^${escapeRegExp(emailRaw)}$`, 'i');

    // –ø–æ—Ä—è–¥–æ–∫: admin -> public -> responder
    let user = await AuthUser.findOne({ email: emailRE });
    let role = user ? 'admin' : null;

    if (!user) {
      user = await People.findOne({ email: emailRE });
      role = user ? 'public' : role;
    }
    if (!user) {
      user = await Spec.findOne({ email: emailRE });
      role = user ? 'responder' : role;
    }

    if (!user || !role) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign(
      { id: user._id, email: user.email, role },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRATION }
    );

    return res.json({ token, role });
  } catch (err) {
    console.error('auth/login error:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', error: err.message });
  }
});

/**
 * GET /api/auth/profile
 */
router.get('/profile', authenticate(), async (req, res) => {
  try {
    const { id, role } = req.user;

    let profile = null;
    if (role === 'admin') {
      profile = await AuthUser.findById(id).select('-password');
    } else if (role === 'public') {
      profile = await People.findById(id).select('-password');
    } else if (role === 'responder') {
      profile = await Spec.findById(id).select('-password');
    }

    if (!profile) {
      return res.status(404).json({ message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    return res.json(profile);
  } catch (err) {
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

export default router;

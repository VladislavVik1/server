// ./routes/authRoutes.js
import dotenv from 'dotenv';
dotenv.config(); // ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–≤—ã–º

import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';
import { authenticate } from '../middleware/auth.js';

const router = express.Router();
const { JWT_SECRET, JWT_EXPIRES_IN = '1d' } = process.env;

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
  try {
    const { email, password, role } = req.body;
    if (await User.findOne({ email })) {
      return res.status(400).json({ message: 'Email —É–∂–µ –∑–∞–Ω—è—Ç' });
    }
    const hash = await bcrypt.hash(password, 10);
    const user = await User.create({ email, password: hash, role });

    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRES_IN }
    );
    
    res.status(201).json({ token, role: user.role });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// –õ–æ–≥–∏–Ω
router.post('/login', async (req, res) => {
  console.log('üí¨ [Login] Body:', req.body);
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) {
      console.warn('‚ö†Ô∏è [Login] User not found:', email);
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      console.warn('‚ö†Ô∏è [Login] Invalid password for:', email);
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRES_IN }
    );
    console.log('‚úÖ [Login] Success for:', email);
    res.json({ token });
  } catch (err) {
    console.error('‚ùå [Login] Error:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
router.get('/profile', authenticate(), async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

export default router;

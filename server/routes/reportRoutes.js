// server/routes/reportRoutes.js
import express from 'express';
import {
  createReport,
  updateStatus,
  getAllReports,
  getReportById,
  getMyReports,
  listForModeration,
} from '../controllers/reportController.js';
import { authenticate } from '../middleware/auth.js';
import { upload } from '../middleware/upload.js';

const router = express.Router();

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ‚Äî public –∏ admin
router.post(
  '/reports',
  authenticate(['public', 'admin']),
  upload.single('image'),
  async (req, res) => {
    try {
      const report = await createReport(req);
      res.status(201).json(report);
    } catch (err) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
    }
  }
);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ‚Äî responder –∏ admin
router.put(
  '/reports/:id/status',
  authenticate(['responder', 'admin']),
  async (req, res) => {
    try {
      const updated = await updateStatus(req);
      res.json(updated);
    } catch (err) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
    }
  }
);

// –í—Å–µ –æ—Ç—á—ë—Ç—ã ‚Äî responder –∏ admin
router.get(
  '/reports',
  authenticate(['responder', 'admin']),
  async (req, res) => {
    try {
      const reports = await getAllReports();
      res.json(reports);
    } catch (err) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
    }
  }
);

// –¢–æ–ª—å–∫–æ —Å–≤–æ–∏ ‚Äî public
router.get(
  '/reports/mine',
  authenticate(['public']),
  async (req, res) => {
    try {
      const reports = await getMyReports(req.user.id);
      res.json(reports);
    } catch (err) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
    }
  }
);

// üîπ –õ–∏—Å—Ç–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–ü–ï–†–ï–î :id!)
router.get(
  '/reports/moderation',
  authenticate(['responder', 'admin']),
  listForModeration
);

// –ê–ª–∏–∞—Å –Ω–∞ pending
router.get(
  '/reports/pending',
  authenticate(['responder', 'admin']),
  async (req, res) => {
    req.query.status = 'pending';
    return listForModeration(req, res);
  }
);

// –û–¥–∏–Ω –æ—Ç—á—ë—Ç –ø–æ ID ‚Äî –≤—Å–µ —Ä–æ–ª–∏
router.get(
  '/reports/:id',
  authenticate(['public', 'responder', 'admin']),
  async (req, res) => {
    try {
      await getReportById(req, res); // –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∞–º —à–ª—ë—Ç res
    } catch (err) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
    }
  }
);

export default router;
